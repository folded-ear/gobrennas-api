scalar Date
scalar NonNegativeInt
scalar NonNegativeFloat

interface Node {
    id: ID!
}

interface AccessControlled {
    owner: User!
    grants: [AccessControlEntry!]!
}


### --- QUERY TYPES --- ###
type Query {
    node(id: ID!): Node
    getCurrentUser: User

    getPlans: [Plan]
    getPlanItem(id: ID!): PlanItem
}

extend type Query {
    getTimers: [Timer!]!
    getTimer(id: ID!): Timer!
}


### --- RESOURCE TYPES --- ###
type Plan implements Node & AccessControlled {
    id: ID!
    owner: User!
    name: String!
    grants: [AccessControlEntry!]!
    buckets: [PlanBucket]
 }

"""
Represents a single item on a plan
"""
type PlanItem implements Node {
    id: ID!
    name: String!
    quantity: NonNegativeFloat
    units: String
    preparation: String
    notes: String
    parent: PlanItem
    subtasks: [PlanItem]
    components: [PlanItem]
    bucket: PlanBucket
    status: TaskStatus!
#    aggregateId: ID!
#    ingredientId: ID!

    #    parentId: ID!
    #    subtaskIds: [ID!]

}

type PlanBucket {
    id: ID!
    name: String!
    date: Date!
}

"""
Represents a pause-able timer of user-specified length.
"""
type Timer implements Node {
    id: ID!
    owner: User!
    grants: [AccessControlEntry!]!
    """Number of seconds the timer is set for."""
    duration: NonNegativeInt!
    """Number of seconds remaining; negative if already complete."""
    remaining: Int!
    """Whether the timer is running."""
    running: Boolean!
    """Whether the timer is paused."""
    paused: Boolean!
    """Whether the timer is complete."""
    complete: Boolean!
}

type User {
    id: ID!
    name: String
    email: String
    imageUrl: String
    provider: String
}

type AccessControlEntry {
    user: User
    level: AccessLevel
}


### --- MUTATION TYPES --- ###
type Mutation {
}

extend type Mutation {
    """Create a new timer with the specified duration and start it."""
    createTimer(duration: NonNegativeInt): Timer!
    """Pause the specified running timer."""
    pauseTimer(id: ID!): Timer!
    """Resume the specified paused timer."""
    resumeTimer(id: ID!): Timer!
    """
    Delete the specified timer, regardless of its status, returning whether any
    action was taken.
    """
    deleteTimer(id: ID!): Boolean!
}

#enum
enum TaskStatus {
    NEEDED
    ACQUIRED
    COMPLETED
    DELETED
}

enum AccessLevel {
    VIEW
    CHANGE
    ADMINISTER
}
