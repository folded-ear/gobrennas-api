interface Owned {
    """The user who owns this object."""
    owner: User!
}

interface AccessControlled implements Owned {
    owner: User!
    """The object's ACL, which includes its owner and any grants of access.
    """
    acl: Acl!
    grants: [AccessControlEntry!]!
}

type Acl implements Owned {
    owner: User!
    """Users granted access, by the owner. This is conceptually map, so a given
    user (the key) uniquely identifies their access level (the value).
    """
    grants: [AccessControlEntry!]!
}

type AccessControlEntry {
    """The user who has been granted access to an AccessControlled object."""
    user: User!
    """The level of access the user has been granted."""
    level: AccessLevel!
}

enum AccessLevel {
    VIEW
    CHANGE
    ADMINISTER
}

extend type Query {
    """DEPRECATED: prefer `profile.me`"""
    getCurrentUser: User
    profile: ProfileQuery!
}

extend type Mutation {
    profile: ProfileMutation!
}

type User implements Node {
    id: ID!
    name: String
    email: String!
    imageUrl: String
    provider: String!
    roles: [String!]!
    devices: [UserDevice!]!
    """A value for every preference is returned. If a deviceKey is provided,
    that device's values are preferred. Otherwise, the user's global preferences
    are used, if they exists. If not, the static default is returned.
    """
    preferences(deviceKey: String): [UserPreference!]!
}

type UserPreference {
    user: User!
    device: UserDevice
    type: DataType!
    name: String!
    value: String
}

type UserDevice implements Node {
    id: ID!
    user: User!
    key: String!
    name: String!
    preferences: [UserPreference!]!
}

"""A suggestion for how to interpret the always-a-String value of a preference.
Clients should be "generous" in their parsing, where possible. E.g, `BOOLEAN`
strings `"123"` and `"0"` should be treated as `true` and `false`, respectively.
"""
enum DataType {
    BOOLEAN
    FLOAT
    "A string with ID semantics"
    ID
    INT
    "Arbitrary JSON-serialized data"
    JSON
    "A JSON-serialized list of ID values"
    SET_OF_IDS
    STRING
}

"""I represent an uploadable "scratch file", which may be PUT without further
authentication of the client. Scratch files are identified by their filename,
which may be passed to other APIs to "use" an uploaded scratch file.
"""
type ScratchUpload {
    """The filename which uniquely identifies the uploaded scratch file."""
    filename: String!
    """The URL to PUT the scratch file to."""
    url: String!
    """When the URL's signature will expire."""
    expiration: DateTime!
    """The content type of the scratch file."""
    contentType: String!
    """The cache-control header which must be set on the request."""
    cacheControl: String!
    """INFORMATIONAL: an example cURL command you might use to upload the file."""
    curl: String!
}

type ProfileQuery {
    me: User!
    friends: [User!]!
    """Request a pre-signed upload URL to PUT a scratch file to, identified by
    the returned `filename`. Upload URLs are valid for only a short time; they
    should be requested when an upload is needed, not preemptively in case one
    may be needed in the future.
    """
    scratchFile(contentType: String!, originalFilename: String): ScratchUpload!
}

type ProfileMutation {
    clearPreference(name: String!, deviceKey: String): UserPreference!
    deleteDevice(id: ID!): Deletion!
    renameDevice(id: ID!, name: String!): UserDevice!
    setPreference(name: String!, deviceKey: String, value: String!): UserPreference!
}
