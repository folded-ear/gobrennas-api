extend type Query {
    pantry: PantryQuery!
}

enum SortDir {
    ASC,
    DESC
}

type PantryQuery {
    """Search available pantry items.
    """
    search(
        """Textual query to filter items by. The exact query operation performed
        is unspecified, except that 'duplicates:12345' will return auto-detected
        duplicates of the item with id '12345'. Exactly what "duplicate" means
        is unspecified and subject to change, excepting that it will remain
        consistent with results' "duplicateCount".
        """
        query: String
        """Field to sort the result by. If omitted, the sort will be stable, but
        is otherwise unspecified.
        """
        sortBy: String
        """Direction to sort the result, ascending by default.
        """
        sortDir: SortDir = ASC
        """How many items to return in the connection.
        """
        first: NonNegativeInt = 25
        """Cursor to find results after. This should be omitted to retrieve the
        first page.
        """
        after: Cursor = null
    ): PantryItemConnection!

    updatedSince(cutoff: Long!): [PantryItem!]!
}

type PantryItemConnection {
    edges: [PantryItemConnectionEdge!]!
    pageInfo: PageInfo!
}

type PantryItemConnectionEdge {
    node: PantryItem!
    cursor: Cursor!
}

type PantryItem implements Node & Ingredient {
    id: ID!
    name: String!
    """The relative order this pantry item will be shown on the shopping view.
    The absolute value has no semantic, and may change arbitrarily.
    """
    storeOrder: Int
    """Other names this pantry item can be referred to as. E.g., an "apple" item
    may have synonym "pomme".
    """
    synonyms: [String!]
    labels: [String!]
    """When this pantry item was first used.
    """
    firstUse: DateTime!
    """The number of times this pantry item is used, including synonyms, in both
    library recipes and on a plan.
    """
    useCount: NonNegativeInt!
    """The number of auto-detected duplicates of this pantry item. Exactly what
    "duplicate" means is unspecified and subject to change, excepting that it
    will remain consistent with a 'duplicates:12345' search query.
    """
    duplicateCount: NonNegativeInt!
}

extend type Mutation {
    pantry: PantryMutation!
}

type PantryMutation {
    renameItem(id: ID!, name: String!): PantryItem!

    addLabel(id: ID!, label: String!): PantryItem!
    removeLabel(id: ID!, label: String!): PantryItem!
    setLabels(id: ID!, labels: [String!]!): PantryItem!

    addSynonym(id: ID!, synonym: String!): PantryItem!
    removeSynonym(id: ID!, synonym: String!): PantryItem!
    setSynonyms(id: ID!, synonyms: [String!]!): PantryItem!

    """Combine two or more pantry items, and return the result, after unifying
    synonyms, labels, and references.
    """
    combineItems(ids: [ID!]!): PantryItem!
    """Delete a pantry item, which MUST be unreferenced.
    """
    deleteItem(id: ID!): Deletion!

    """Orders one PantryItem relative to another, and returns it. Note that
    there will almost certainly be other PantryItems affected by the operation.
    A follow-on 'updatedSince' query can get the whole shebang, if you care.
    """
    orderForStore(id: ID!, targetId: ID!, after: Boolean = true): PantryItem!
}
