extend type Query {
    getPlans: [Plan]
    getPlanItem(id: ID!): PlanItem
}

interface CorePlanItem implements Node {
    id: ID!
    name: String!
    children: [PlanItem!]!
    descendants: [PlanItem!]!
}

type Plan implements Node & Owned & AccessControlled & CorePlanItem {
    id: ID!
    owner: User!
    name: String!
    grants: [AccessControlEntry!]!
    children: [PlanItem!]!
    descendants: [PlanItem!]!
    buckets: [PlanBucket!]!
}

"""
Represents a single item on a plan
"""
type PlanItem implements Node & CorePlanItem {
    id: ID!
    name: String!
    quantity: NonNegativeFloat
    units: String
    preparation: String
    notes: String
    plan: Plan!
    parent: PlanItem!
    children: [PlanItem!]!
    descendants: [PlanItem!]!
    components: [PlanItem!]!
    bucket: PlanBucket
    status: TaskStatus!
}

type PlanBucket {
    id: ID!
    name: String
    date: Date!
}

enum TaskStatus {
    NEEDED
    ACQUIRED
    COMPLETED
    DELETED
}
