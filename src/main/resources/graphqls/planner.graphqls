extend type Query {
    planner: PlannerQuery
}

type PlannerQuery {
    plans: [Plan]!
    planItem(id: ID!): PlanItem!
}

interface CorePlanItem implements Node {
    id: ID!
    name: String!
    childCount: NonNegativeInt
    children: [PlanItem!]!
    descendantCount: NonNegativeInt
    descendants: [PlanItem!]!
}

type Plan implements Node & Owned & AccessControlled  {
    id: ID!
    owner: User!
    name: String!
    grants: [AccessControlEntry!]!
    childCount: NonNegativeInt
    children: [PlanItem!]!
    descendantCount: NonNegativeInt
    descendants: [PlanItem!]!
    bucketCount: NonNegativeInt
    buckets: [PlanBucket!]!
}

"""Represents a single item on a plan"""
type PlanItem implements Node {
    id: ID!
    name: String!
    quantity: Quantity
    preparation: String
    notes: String
    plan: Plan!
    parent: PlanItem
    childCount: NonNegativeInt
    children: [PlanItem!]!
    descendantCount: NonNegativeInt
    descendants: [PlanItem!]!
    aggregate: PlanItem
    componentCount: NonNegativeInt
    components: [PlanItem!]!
    bucket: PlanBucket
    status: PlanItemStatus!
}

type PlanBucket {
    id: ID!
    name: String
    date: Date
}

enum PlanItemStatus {
    NEEDED
    ACQUIRED
    COMPLETED
    DELETED
}
