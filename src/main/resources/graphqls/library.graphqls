extend type Query {
    library: LibraryQuery
}

enum LibrarySearchScope {
    MINE
    EVERYONE
}

type LibraryQuery {
    """Search the recipe library.
    """
    recipes(
        """The scope to search for recipes within.
        """
        scope: LibrarySearchScope! = MINE
        """The textual query to filter results by. Can include simple words, as
        well as quoted phrases.
        """
        query: String! = ""
        """Ingredient(s) to include. Missing/empty means "all".
        """
        ingredients: [ID!]! = []
        """How many recipes to return in the connection. If not specified, 10
        will be returned.
        """
        first: NonNegativeInt! = 10
        """Cursor to find results after. This should be omitted to retrieve the
        first page.
        """
        after: Cursor = null
    ): RecipeConnection!

    getRecipeById(id: ID!): Recipe

    """Recognize quantity, unit, and/or ingredient in a raw ingredient ref (aka
    item) string, and describe that structure. By default, also provide
    suggestions based on partial matches.
    """
    recognizeItem(
        """The raw string to recognize.
        """
        raw: String!
        """The position of the cursor in the raw string, used to make contextual
        suggestions. If not specified, the end of the raw string is assumed.
        """
        cursor: NonNegativeInt
    ): RecognizedItem
}

"""The result of recognizing a raw ingredient ref item.
"""
type RecognizedItem {
    """The raw string which was recognized.
    """
    raw: String!
    """The position of the cursor in the raw string.
    """
    cursor: NonNegativeInt!
    """Recognized ranges within the raw string.
    """
    ranges: [RecognizedRange!]!
    """Suggestions of what the user might wish to insert at the current cursor
    position. If more than 'count' suggestions are available, the returned
    subset is unspecified, other than pantry items are preferred to recipes.
    """
    suggestions(count: PositiveInt! = 10): [RecognitionSuggestion!]!
}

enum RecognizedRangeType {
    UNKNOWN
    QUANTITY
    UNIT
    NEW_UNIT
    ITEM
    NEW_ITEM
}

"""A recognized quantity in the raw string. The type indicates which of the id
or quantity fields will be non-null, if either.
"""
type RecognizedRange {
    start: NonNegativeInt!
    end: NonNegativeInt!
    type: RecognizedRangeType!
    quantity: NonNegativeFloat
    id: ID
}

"""A suggestion for what might come next at the cursor position, along with the
target range of the raw string it would replace.
"""
type RecognitionSuggestion {
    name: String!
    target: RecognizedRange!
}

type RecipeConnection {
    edges: [RecipeConnectionEdge!]!
    pageInfo: PageInfo!
}

type RecipeConnectionEdge {
    node: Recipe!
    cursor: Cursor!
}

interface Ingredient implements Node {
    id: ID!
    name: String!
    labels: [String!]
}

enum ChronoUnit {
    MILLIS
    SECONDS
    MINUTES
    HOURS
}

type Recipe implements Node & Owned & Ingredient {
    id: ID!
    owner: User!
    name: String!
    externalUrl: String
    directions: String
    ingredients(
        """Ingredient(s) to include. Missing/empty means "all".
        """
        ingredients: [ID!]! = []
    ): [IngredientRef!]!
    """All subrecipes. Multiple layers of nested recipes are flattened, and the
    contextual recipe is not included.
    """
    subrecipes: [Recipe!]!
    labels: [String!]
    yield: Int
    calories: Int
    totalTime(
        unit: ChronoUnit = MINUTES
    ): Int
    photo: Photo
    favorite: Boolean!
    """Number of times this recipe has been sent to any plan, optionally
    filtered by the result status (only COMPLETED and DELETED make sense).
    """
    plannedCount(
        status: PlanItemStatus = null
    ): Int!
    """History of this recipe being planned, in reverse-chronological order,
    optionally filtered by the result status (only COMPLETED and DELETED make
    sense). By default, only the five most recent records will be returned.
    """
    plannedHistory(
        status: PlanItemStatus = null,
        last: NonNegativeInt = 5
    ): [PlannedRecipeHistory!]!
}

type Photo {
    url: String!
    focus: [Float!]
}

type IngredientRef {
    raw: String!
    quantity: Quantity
    ingredient: Ingredient
    preparation: String
}

type Quantity {
    quantity: Float!
    units: UnitOfMeasure
}

type UnitOfMeasure implements Node {
    id: ID!
    name: String!
}
enum Rating {
    ONE_STAR
    TWO_STARS
    THREE_STARS
    FOUR_STARS
    FIVE_STARS
}

type PlannedRecipeHistory implements Node {
    id: ID!
    """The recipe this history item is for.
    """
    recipe: Recipe!
    """The user who owns this history item, which may or may not be the recipe's
    owner.
    """
    owner: User!
    status: PlanItemStatus!
    plannedAt: DateTime!
    doneAt: DateTime!
    rating: Rating
    ratingInt: PositiveInt
    notes: String
}

extend type Mutation {
    library: LibraryMutation
}

type LibraryMutation {
    """Create a new recipe in your library, from the passed info.
    """
    createRecipe(info: IngredientInfo!, photo: Upload, cookThis: Boolean): Recipe!
    """Create a new recipe in your library, from the passed info, which is based
    on the passed source recipe id.
    """
    createRecipeFrom(sourceRecipeId: ID!, info: IngredientInfo!, photo: Upload): Recipe!
    """Update a recipe in your library, from the passed info.
    """
    updateRecipe(id: ID!, info: IngredientInfo!, photo: Upload): Recipe!
    """Set the photo for a recipe in your library, without changing any other
    info about the recipe. A photo may be set during create and/or update.
    """
    setRecipePhoto(id: ID!, photo: Upload!): Recipe!
    """Delete a recipe from your library.
    """
    deleteRecipe(id: ID!): Deletion!
    history(recipeId: ID!): RecipeHistoryMutation
}

type RecipeHistoryMutation {
    recipeId: ID!
    """Set/update the rating on this history item. Either rating OR ratingInt
    should be supplied, not both.
    """
    setRating(id: ID!, rating: Rating, ratingInt: PositiveInt): PlannedRecipeHistory!
    """Set/update the notes on this history item.
    """
    setNotes(id: ID!, notes: String!): PlannedRecipeHistory!
}

input IngredientInfo {
    type: String!
    name: String!
    storeOrder: Int
    externalUrl: String
    directions: String
    ingredients: [IngredientRefInfo!]
    labels: [String!]
    yield: Int
    calories: Int
    totalTime: Int
    photoFocus: [Float!]
}

input IngredientRefInfo {
    raw: String!
    quantity: Float
    units: String
    uomId: Long
    ingredient: String
    ingredientId: Long
    preparation: String
}
